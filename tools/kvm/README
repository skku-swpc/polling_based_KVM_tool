Project Name
============
KVM Tool for Accelerating File I/O in Virtualized System


Contribution
============
This tool is to support fuse-vext (https://github.com/skku-swpc/fuse-vext.git)
 which is a paravirtualized file system for acclerating file I/O.
To achieve this, it provides two functions; 1) Shared queue between host and guest, 2) I/O-dedicated thread.

  - Shared Queue Between Host and Guest

     The shared queue is used to interact between the guest and the host. 
     Originally an I/O operation triggers a vmexit because it attempts to access physical block devices 
     but the virtual machine has no privilege to access them. 
     However, when the shared queue is used, I/O operations are substituted with memory operations 
     which can be directly executed in a virtual machine. 
     In this context, the memory address should be appropriately translated among guest virtual addresses, 
     guest physical addresses, and host virtual addresses.
     After block I/O requests are enqueued from the paravirtualized file system(fuse-vext), 
     the I/O-dedicated thread handles them and updates the completion state in the queue. 
     Finally, the file system dequeues the requests marked with completion and continues the remaining I/O process. 
     For sharing a queue, both the VM emulator and the virtual machine should know the memory address of the queue. 
     In a typical hosted virtualization environment, it is not difficult to share memory addresses
     because the emulator and its virtual machine have the same address space.

  - I/O-dedicated Thread

     With this KVM tool, the kernel of guest OS delegates block I/O process to the I/O-dedicated thread. 
     Through the shared queue, I/O requests are sent to the host without triggering a vmexit. 
     But there remains one more problem; notifying the host of new requests. 
     For this, virtio intentionally raises a vmexit. 
     To avoid incurring vmexits, we introduces an I/O-dedicated thread, 
     which monitors the queue whether new requests are arrived or not. 
     To check it as fast as possible, the thread uses polling mechanism. 
     As a polling thread occupies one CPU core all the time, 
     it has a drawback in terms of the CPU usage, but it can improve I/O performance 
     when I/O intensive workloads are running on the system. 
     In addition, block I/O operations are asynchronous, 
     so the individual I/O-dedicated thread is able to handle several I/O requests from many VMs concurrently.


Linux KVM tool
==============
The goal of this tool is to provide a clean, from-scratch, lightweight
KVM host tool implementation that can boot Linux guest images (just a
hobby, won't be big and professional like QEMU) with no BIOS
dependencies and with only the minimal amount of legacy device
emulation.

It's great as a learning tool if you want to get your feet wet in
virtualization land: it's only 5 KLOC of clean C code that can already
boot a guest Linux image.

Right now it can boot a Linux image and provide you output via a serial
console, over the host terminal, i.e. you can use it to boot a guest
Linux image in a terminal or over ssh and log into the guest without
much guest or host side setup work needed.

1. To try out the tool, clone the git repository:

  git clone git://github.com/penberg/linux-kvm.git

or alternatively, if you already have a kernel source tree:

  git remote add kvm-tool git://github.com/penberg/linux-kvm.git
  git remote update
  git checkout kvm-tool/master -b kvm-tool

2. Compile the tool:

  cd tools/kvm && make

3. Download a raw userspace image:

  wget http://wiki.qemu.org/download/linux-0.2.img.bz2 && bunzip2
linux-0.2.img.bz2

4. The guest kernel has to be built with the following configuration:

 - For the default console output:
	CONFIG_SERIAL_8250=y
	CONFIG_SERIAL_8250_CONSOLE=y

 - For running 32bit images on 64bit hosts:
	CONFIG_IA32_EMULATION=y

 - Proper FS options according to image FS (e.g. CONFIG_EXT2_FS, CONFIG_EXT4_FS).

 - For all virtio devices listed below:
	CONFIG_VIRTIO=y
	CONFIG_VIRTIO_RING=y
	CONFIG_VIRTIO_PCI=y

 - For virtio-blk devices (--disk, -d):
	CONFIG_VIRTIO_BLK=y

 - For virtio-net devices ([--network, -n] virtio):
	CONFIG_VIRTIO_NET=y

 - For virtio-9p devices (--virtio-9p):
	CONFIG_NET_9P=y
	CONFIG_NET_9P_VIRTIO=y
	CONFIG_9P_FS=y

 - For virtio-balloon device (--balloon):
	CONFIG_VIRTIO_BALLOON=y

 - For virtio-console device (--console virtio):
	CONFIG_VIRTIO_CONSOLE=y

 - For virtio-rng device (--rng):
	CONFIG_HW_RANDOM_VIRTIO=y

 - For vesa device (--sdl or --vnc):
	CONFIG_FB_VESA=y


5. And finally, launch the hypervisor:

  ./lkvm run --disk linux-0.2.img \
	    --kernel ../../arch/x86/boot/bzImage \
or

  sudo ./lkvm run --disk linux-0.2.img \
		 --kernel ../../arch/x86/boot/bzImage \
		 --network virtio

The tool has been written by Pekka Enberg, Cyrill Gorcunov, Asias He,
Sasha Levin and Prasad Joshi. Special thanks to Avi Kivity for his help
on KVM internals and Ingo Molnar for all-around support and encouragement!

See the following thread for original discussion for motivation of this
project:

http://thread.gmane.org/gmane.linux.kernel/962051/focus=962620

Build dependencies
=====================
For deb based systems:
32-bit:
sudo apt-get install build-essential
64-bit:
sudo apt-get install build-essential libc6-dev-i386

For rpm based systems:
32-bit:
yum install glibc-devel
64-bit:
yum install glibc-devel glibc-static

On 64-bit Arch Linux make sure the multilib repository is enabled in your
/etc/pacman.conf and run
pacman -Sy lib32-glibc
